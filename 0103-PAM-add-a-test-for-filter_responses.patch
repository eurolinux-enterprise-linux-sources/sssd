From 4d99ba511858905148e2124e4d5da43a5e0edf70 Mon Sep 17 00:00:00 2001
From: Sumit Bose <sbose@redhat.com>
Date: Thu, 20 Oct 2016 11:48:22 +0200
Subject: [PATCH 103/104] PAM: add a test for filter_responses()

Reviewed-by: Jakub Hrozek <jhrozek@redhat.com>
---
 src/responder/pam/pamsrv.h      |  3 +++
 src/responder/pam/pamsrv_cmd.c  |  4 ++--
 src/tests/cmocka/test_pam_srv.c | 52 +++++++++++++++++++++++++++++++++++++++++
 3 files changed, 57 insertions(+), 2 deletions(-)

diff --git a/src/responder/pam/pamsrv.h b/src/responder/pam/pamsrv.h
index b44e1c3378817aa169fa1fe8995bdb223f593cb0..def65482616fe72d40f531bbcd7fb998d50a7e23 100644
--- a/src/responder/pam/pamsrv.h
+++ b/src/responder/pam/pamsrv.h
@@ -101,4 +101,7 @@ errno_t
 pam_set_last_online_auth_with_curr_token(struct sss_domain_info *domain,
                                          const char *username,
                                          uint64_t value);
+
+errno_t filter_responses(struct confdb_ctx *cdb,
+                         struct response_data *resp_list);
 #endif /* __PAMSRV_H__ */
diff --git a/src/responder/pam/pamsrv_cmd.c b/src/responder/pam/pamsrv_cmd.c
index c4ea9cd3e8970db7d281086453d22f3218b05c47..3ad4375cb2801c753f7398b011a288133aab54e7 100644
--- a/src/responder/pam/pamsrv_cmd.c
+++ b/src/responder/pam/pamsrv_cmd.c
@@ -470,8 +470,8 @@ fail:
     return ret;
 }
 
-static errno_t filter_responses(struct confdb_ctx *cdb,
-                                struct response_data *resp_list)
+errno_t filter_responses(struct confdb_ctx *cdb,
+                         struct response_data *resp_list)
 {
     int ret;
     struct response_data *resp;
diff --git a/src/tests/cmocka/test_pam_srv.c b/src/tests/cmocka/test_pam_srv.c
index 4db0d2791933513351164d574d2f8527787ae67c..65373b419c5e6ec36846837e1efc19a25d546a59 100644
--- a/src/tests/cmocka/test_pam_srv.c
+++ b/src/tests/cmocka/test_pam_srv.c
@@ -31,6 +31,7 @@
 #include "responder/pam/pam_helpers.h"
 #include "sss_client/pam_message.h"
 #include "sss_client/sss_cli.h"
+#include "confdb/confdb.h"
 
 #include "util/crypto/sss_crypto.h"
 #ifdef HAVE_NSS
@@ -1637,6 +1638,54 @@ void test_pam_cert_auth(void **state)
     assert_int_equal(ret, EOK);
 }
 
+void test_filter_response(void **state)
+{
+    int ret;
+    struct pam_data *pd;
+    uint8_t offline_auth_data[(sizeof(uint32_t) + sizeof(int64_t))];
+    uint32_t info_type;
+
+    struct sss_test_conf_param pam_params[] = {
+        { CONFDB_PAM_VERBOSITY, "1" },
+        { NULL, NULL },             /* Sentinel */
+    };
+
+    ret = add_pam_params(pam_params, pam_test_ctx->rctx->cdb);
+    assert_int_equal(ret, EOK);
+
+    pd = talloc_zero(pam_test_ctx, struct pam_data);
+    assert_non_null(pd);
+
+    info_type = SSS_PAM_USER_INFO_OFFLINE_AUTH;
+    memset(offline_auth_data, 0, sizeof(offline_auth_data));
+    memcpy(offline_auth_data, &info_type, sizeof(uint32_t));
+    ret = pam_add_response(pd, SSS_PAM_USER_INFO,
+                           sizeof(offline_auth_data), offline_auth_data);
+    assert_int_equal(ret, EOK);
+
+    ret = filter_responses(pam_test_ctx->rctx->cdb, pd->resp_list);
+    assert_int_equal(ret, EOK);
+    assert_true(pd->resp_list->do_not_send_to_client);
+
+    pam_params[0].value = "0";
+    ret = add_pam_params(pam_params, pam_test_ctx->rctx->cdb);
+    assert_int_equal(ret, EOK);
+
+    ret = filter_responses(pam_test_ctx->rctx->cdb, pd->resp_list);
+    assert_int_equal(ret, EOK);
+    assert_true(pd->resp_list->do_not_send_to_client);
+
+    /* SSS_PAM_USER_INFO_OFFLINE_AUTH message will only be shown with
+     * pam_verbosity 2 or above if cache password never expires. */
+    pam_params[0].value = "2";
+    ret = add_pam_params(pam_params, pam_test_ctx->rctx->cdb);
+    assert_int_equal(ret, EOK);
+
+    ret = filter_responses(pam_test_ctx->rctx->cdb, pd->resp_list);
+    assert_int_equal(ret, EOK);
+    assert_false(pd->resp_list->do_not_send_to_client);
+}
+
 int main(int argc, const char *argv[])
 {
     int rv;
@@ -1746,6 +1795,9 @@ int main(int argc, const char *argv[])
                                         pam_test_setup_no_verification,
                                         pam_test_teardown),
 #endif /* HAVE_NSS */
+
+        cmocka_unit_test_setup_teardown(test_filter_response,
+                                        pam_test_setup, pam_test_teardown),
     };
 
     /* Set debug level to invalid value so we can deside if -d 0 was used. */
-- 
2.7.4

