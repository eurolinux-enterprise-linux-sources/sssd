From 2d077937834bd519c1989e531afaa1b85ce98fd5 Mon Sep 17 00:00:00 2001
From: Lukas Slebodnik <lslebodn@redhat.com>
Date: Mon, 23 Jan 2017 07:36:14 +0100
Subject: [PATCH] sysdb-tests: Add test for sysdb_search_object_by_name
MIME-Version: 1.0
Content-Type: text/plain; charset=UTF-8
Content-Transfer-Encoding: 8bit

Reviewed-by: Pavel BÅ™ezina <pbrezina@redhat.com>
(cherry picked from commit daf3714bd3f772934025894c534aa902f0b8f98f)
(cherry picked from commit 4814454b846cbe9682e0bbcfcf9e0fe98b5181f3)
+ create equivalent of test_data_new_group for 1.13 due to sysdb
  refactoring in newer branches
(cherry picked from commit 0a539e693254275248ff5756e2e35a9a8f991bb0)

 Conflicts happened on:
	src/tests/sysdb-tests.c
---
 src/tests/sysdb-tests.c | 178 ++++++++++++++++++++++++++++++++++++++++++++++++
 1 file changed, 178 insertions(+)

diff --git a/src/tests/sysdb-tests.c b/src/tests/sysdb-tests.c
index 3991e2504afde0fd807857f50843d5fbdf7b4ba5..4ecac416d69e221217de0a70ec00b41ef98c24e7 100644
--- a/src/tests/sysdb-tests.c
+++ b/src/tests/sysdb-tests.c
@@ -196,6 +196,68 @@ struct test_data {
     struct ldb_message **msgs;
 };
 
+static struct test_data *test_data_new(struct sysdb_test_ctx *test_ctx)
+{
+    struct test_data *data;
+
+    data = talloc_zero(test_ctx, struct test_data);
+    if (data == NULL) {
+        return NULL;
+    }
+
+    data->attrs = sysdb_new_attrs(data);
+    if (data->attrs == NULL) {
+        talloc_free(data);
+        return NULL;
+    }
+
+    data->ctx = test_ctx;
+    data->ev = test_ctx->ev;
+
+    return data;
+}
+
+static struct test_data *test_data_new_user(struct sysdb_test_ctx *test_ctx,
+                                            uid_t uid)
+{
+    struct test_data *data;
+
+    data = test_data_new(test_ctx);
+    if (data == NULL) {
+        return NULL;
+    }
+
+    data->uid = uid;
+    data->gid = uid;
+    data->username = talloc_asprintf(data, "testuser%d", uid);
+    if (data->username == NULL) {
+        talloc_free(data);
+        return NULL;
+    }
+
+    return data;
+}
+
+static struct test_data *test_data_new_group(struct sysdb_test_ctx *test_ctx,
+                                             gid_t gid)
+{
+    struct test_data *data;
+
+    data = test_data_new(test_ctx);
+    if (data == NULL) {
+        return NULL;
+    }
+
+    data->gid = gid;
+    data->groupname = talloc_asprintf(data, "testgroup%d", gid);
+    if (data->groupname == NULL) {
+        talloc_free(data);
+        return NULL;
+    }
+
+    return data;
+}
+
 static int test_add_user(struct test_data *data)
 {
     char *homedir;
@@ -5290,6 +5352,119 @@ START_TEST(test_sysdb_search_object_by_uuid)
 }
 END_TEST
 
+START_TEST(test_sysdb_search_object_by_name)
+{
+    errno_t ret;
+    struct sysdb_test_ctx *test_ctx;
+    struct ldb_result *res;
+    struct test_data *data;
+    const char *user_name = "John Doe";
+    const char *group_name = "Domain Users";
+    const char *lc_group_name = "domain users";
+    const char *returned_name;
+
+    /* Setup */
+    ret = setup_sysdb_tests(&test_ctx);
+    fail_if(ret != EOK, "Could not set up the test");
+
+    /* test for missing entry */
+    ret = sysdb_search_object_by_name(test_ctx, test_ctx->domain,
+                                      "nonexisting_name", NULL, &res);
+    fail_unless(ret == ENOENT, "sysdb_search_object_by_name failed with "
+                               "[%d][%s].", ret, strerror(ret));
+
+    /* test user search */
+    data = test_data_new_user(test_ctx, 23456);
+    fail_if(data == NULL);
+
+    data->username = user_name;
+
+    ret = test_add_user(data);
+    fail_unless(ret == EOK, "sysdb_add_user failed with [%d][%s].",
+                ret, strerror(ret));
+
+    ret = sysdb_search_object_by_name(test_ctx, test_ctx->domain,
+                                      user_name, NULL, &res);
+    fail_unless(ret == EOK,
+                "sysdb_search_object_by_name failed with [%d][%s].",
+                ret, strerror(ret));
+    fail_unless(res->count == 1, "Unexpected number of results, "
+                                 "expected [%u], get [%u].", 1, res->count);
+
+    returned_name = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, ""),
+    fail_unless(strcmp(returned_name, data->username) == 0,
+                "Unexpected object found, expected [%s], got [%s].",
+                user_name, returned_name);
+    talloc_free(res);
+
+    ret = test_remove_user(data);
+    fail_unless(ret == EOK,
+                "test_remove_user failed with [%d][%s].", ret, strerror(ret));
+
+    /* test group search */
+    data = test_data_new_group(test_ctx, 23456);
+    fail_if(data == NULL);
+
+    data->groupname = group_name;
+
+    ret = test_add_group(data);
+    fail_unless(ret == EOK, "sysdb_add_group failed with [%d][%s].",
+                ret, strerror(ret));
+
+    ret = sysdb_search_object_by_name(test_ctx, test_ctx->domain,
+                                      group_name, NULL, &res);
+    fail_unless(ret == EOK,
+                "sysdb_search_object_by_name failed with [%d][%s].",
+                ret, strerror(ret));
+    fail_unless(res->count == 1, "Unexpected number of results, "
+                                 "expected [%u], get [%u].", 1, res->count);
+
+    returned_name = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, ""),
+    fail_unless(strcmp(returned_name, data->groupname) == 0,
+                "Unexpected object found, expected [%s], got [%s].",
+                group_name, returned_name);
+    talloc_free(res);
+
+    ret = test_remove_group(data);
+    fail_unless(ret == EOK,
+                "test_remove_group failed with [%d][%s].", ret, strerror(ret));
+
+    /* test case insensitive search */
+    data = test_data_new_group(test_ctx, 23456);
+    fail_if(data == NULL);
+
+    data->groupname = group_name;
+    test_ctx->domain->case_sensitive = false;
+
+    data->attrs = sysdb_new_attrs(test_ctx);
+    fail_if(data->attrs == NULL);
+
+    ret = sysdb_attrs_add_lc_name_alias(data->attrs, group_name);
+    fail_unless(ret == EOK);
+
+    ret = test_add_group(data);
+    fail_unless(ret == EOK, "sysdb_add_group failed with [%d][%s].",
+                ret, strerror(ret));
+
+    ret = sysdb_search_object_by_name(test_ctx, test_ctx->domain,
+                                      lc_group_name, NULL, &res);
+    fail_unless(ret == EOK,
+                "sysdb_search_object_by_name failed with [%d][%s].",
+                ret, strerror(ret));
+    fail_unless(res->count == 1, "Unexpected number of results, "
+                                 "expected [%u], get [%u].", 1, res->count);
+
+    returned_name = ldb_msg_find_attr_as_string(res->msgs[0], SYSDB_NAME, ""),
+    fail_unless(strcmp(returned_name, data->groupname) == 0,
+                "Unexpected object found, expected [%s], got [%s].",
+                group_name, returned_name);
+
+    talloc_free(res);
+
+    talloc_free(test_ctx);
+}
+END_TEST
+
 /* For simple searches the content of the certificate does not matter */
 #define TEST_USER_CERT_DERB64 "gJznJT7L0aETU5CMk+n+1Q=="
 START_TEST(test_sysdb_search_user_by_cert)
@@ -6525,6 +6700,9 @@ Suite *create_sysdb_suite(void)
     /* Test UUID string searches */
     tcase_add_test(tc_sysdb, test_sysdb_search_object_by_uuid);
 
+    /* Test object by name */
+    tcase_add_test(tc_sysdb, test_sysdb_search_object_by_name);
+
     /* Test user by certificate searches */
     tcase_add_test(tc_sysdb, test_sysdb_search_user_by_cert);
 
-- 
2.14.3

